Kernel command line: -q -f put rox-multichild put child-rox run rox-multichild
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  52,377,600 loops/s.
hd0:0: detected 321 sector (160 kB) disk, model "QEMU HARDDISK", serial "QM00001"
hd0:1: detected 20,160 sector (9 MB) disk, model "QEMU HARDDISK", serial "QM00002"
hd1:0: detected 220 sector (110 kB) disk, model "QEMU HARDDISK", serial "QM00003"
Formatting file system...done.
Boot complete.
Putting 'rox-multichild' into the file system...
Putting 'child-rox' into the file system...
Executing 'rox-multichild':
(rox-multichild) begin
(rox-multichild) open "child-rox"
(rox-multichild) read "child-rox"
Kernel PANIC at ../../filesys/file.c:163 in file_length(): assertion `file != NULL' failed.
Call stack: 0x80042186e9 0x800421f6e6 0x800421dcc2 0x800421dd47 0x800421d7da 0x800421d4d1 0x4001c1 0x4003c5 0x400e66.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 67 ticks
Thread: 30 idle ticks, 32 kernel ticks, 5 user ticks
hd0:0: 0 reads, 0 writes
hd0:1: 113 reads, 478 writes
hd1:0: 220 reads, 0 writes
Console: 1286 characters output
Key